# üê≥ Docker Compose for Medallion ETL Project

version: '3.8'

services:
  # üóÑÔ∏è PostgreSQL Database
  database:
    image: postgres:13-alpine
    container_name: medallion-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: medallion_etl
      POSTGRES_USER: medallion_user
      POSTGRES_PASSWORD: medallion_pass
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U medallion_user -d medallion_etl"]
      interval: 10s
      timeout: 5s
      retries: 5

  # üêç Flask Backend
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: medallion-backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://medallion_user:medallion_pass@database:5432/medallion_etl
      - FLASK_ENV=production
      - SECRET_KEY=your-secret-key-change-in-production
      - CORS_ORIGINS=http://localhost:3000,http://localhost:80
    ports:
      - "5000:5000"
    depends_on:
      database:
        condition: service_healthy
    volumes:
      - ./backend/scrape_data_from_BVMT:/app/scrape_data_from_BVMT
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ‚öõÔ∏è React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: medallion-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# üì¶ Named volumes
volumes:
  postgres_data:
    driver: local

# üåê Networks
networks:
  default:
    name: medallion-network
